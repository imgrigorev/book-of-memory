version: '3.8'
services:
  backend:
    build:
      context: memory-book-service
      dockerfile: Dockerfile
    container_name: backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/api/v1/alive" ]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8083:8083

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    container_name: frontend
    healthcheck:
      test: curl -f http://localhost:80/ || exit 1
    ports:
      - 5173:80

  db:
    image: postgres:15.4-alpine
    container_name: test_db
    restart: always
    ports:
      - "5544:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 2s
      retries: 3
    environment:
      POSTGRES_PASSWORD: test123
      POSTGRES_USER: test
      POSTGRES_DB: test_db

  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "6380:6379"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  minio:
    container_name: minio
    image: 'minio/minio:latest'
    volumes:
      - 'minio_data:/data'
    ports:
      - 9000:9000
      - 9001:9001
    restart: unless-stopped
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_USE_SSL: "${MINIO_USE_SSL}"
      MINIO_DEFAULT_BUCKETS: "${MINIO_BUCKET_NAME}"
      MINIO_SCHEME: "${MINIO_SCHEME}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  minio_data:

networks:
  default_network:
    external: false